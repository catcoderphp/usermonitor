<?php

namespace catcoderphp\usermonitor;

use catcoderphp\usermonitor\models\UserMonitorLog;
use yii\base\Application;
use yii\base\Module;
use Yii;

class UserMonitor extends Module {

    public $applicationIdentifier;
    public $userIp;
    public $userModel;
    public $currentURI;
    public $eventName;
    private $model;
    private $app;
    public static $specialEventParams;

    /**
     * init event handler of functions
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->app = Yii::$app;


        $this->app->on(Application::EVENT_AFTER_REQUEST,[
            $this, "onEventAfterRequest"
        ]);


    }

    /**
     * @param $event
     */
    public function onEventAfterRequest($event) {

        $log = [
            "created" => time(),
            "application_identifier" => $this->applicationIdentifier,
            "user_identifier" => $this->userIdentifier($this->userModel),
            "ip" => $this->userIp,
            "route" => $this->currentURI,
        ];

        if(!empty(self::$specialEventParams)){
            $log["event"] = self::$specialEventParams["event"];
            $log["description"] = self::$specialEventParams["description"];
        } else {
            $log["event"] = $this->eventName;
            $log["description"] = null;
        }
        return $this->save($log);
    }

    /**
     * @param $model
     * @return string
     */
    private function userIdentifier($model) {
        if(class_exists($model["class"])) {
            if(isset($this->app->user->id)) {
                $user = $model["class"]::findOne($this->app->user->id);
                return $user->{$model["field"]};
            } else {
                return "GUEST_@".$this->userIp;
            }
        }
    }


    private function save($params) {
        $this->getModel()->saveLog($params);
    }

    public static function specialEvent($event,$description){
        $params = [
            "event" => $event,
            "description" => $description
        ];
        self::$specialEventParams = $params;
    }

    private function getModel(){
        if(!$this->model instanceof UserMonitorLog) {
            $this->model = new UserMonitorLog();
        }

        return $this->model;
    }

}